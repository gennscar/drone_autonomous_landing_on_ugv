#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSHistoryPolicy


class PrintInformationNode(Node):
    def __init__(self):
        """
        This method declares and initializes the parameters imported by "params.yaml". It declares one subscriber.
        """

        super().__init__("printInformationNode")

        # region Parameters
        # Parameters declaration
        self.declare_parameters(
            namespace='',
            parameters=[
                ('QUEUE_SIZE', None),
                ('BEST_EFFORT', None)
            ]
        )

        # Parameters initialization
        self.QUEUE_SIZE = self.get_parameter('QUEUE_SIZE').value
        self.BEST_EFFORT = self.get_parameter('BEST_EFFORT').value
        # endregion

        # QOS initialization
        self.qosProfile = None
        if self.BEST_EFFORT:
            self.qosProfile = QoSProfile(
                reliability=QoSReliabilityPolicy.RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT,
                history=QoSHistoryPolicy.RMW_QOS_POLICY_HISTORY_KEEP_LAST,
                depth=1
            )
        else:
            self.qosProfile = QoSProfile(
                reliability=QoSReliabilityPolicy.RMW_QOS_POLICY_RELIABILITY_RELIABLE,
                history=QoSHistoryPolicy.RMW_QOS_POLICY_HISTORY_KEEP_LAST,
                depth=1
            )

        # Subscribers initialization
        self.vehiclesInfoSub = self.create_subscription(String, "/vehiclesInfo", self.vehiclesInfoCallback, self.qosProfile)

    # region Callbacks
    def vehiclesInfoCallback(self, msg):
        """
        @param msg: message

        It prints to screen every message received on the topic. This allows to read on the ground station/computer also
        the messages generated by the nodes running on the drones.
        """

        self.get_logger().info(msg.data)
    # endregion


def main():
    rclpy.init(args=None)
    node = PrintInformationNode()

    rclpy.spin(node)
    rclpy.shutdown()


if __name__ == '__main__':
    main()
